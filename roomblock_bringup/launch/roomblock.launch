<launch>

  <arg name="launch_rplidar" default="true" />
  <arg name="simulation" default="false" doc="set flags to indicate this turtle is run in simulation mode."/>
  <arg name="serialport" default="/dev/roomba"/>

  <param name="/use_sim_time" value="$(arg simulation)"/>

  <!-- Robot description -->
  <param name="robot_description" command="$(find xacro)/xacro.py '$(find roomblock_description)/robots/roomblock.urdf.xacro'" />

  <!-- Robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="5.0" />
  </node>

  <!-- Roomba interface (using create_node) -->
  <node unless="$(arg simulation)" pkg="create_node" type="turtlebot_node.py" name="turtlebot_node" respawn="true" args="--respawnable">
    <param name="robot_type" value="roomba" />
    <param name="has_gyro" value="false" />
    <param name="bonus" value="false" />
    <param name="update_rate" value="30.0" />
    <param name="port" value="$(arg serialport)" />
    <!-- <remap from="cmd_vel" to="mobile_base/commands/velocity" /> -->
    <remap from="turtlebot_node/sensor_state" to="mobile_base/sensors/core" />
    <remap from="imu/data" to="mobile_base/sensors/imu_data" />
    <remap from="imu/raw" to="mobile_base/sensors/imu_data_raw" />
  </node>

  <!-- The odometry estimator -->
  <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <remap from="imu_data" to="imu/data"/>
    <param name="freq" value="10.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="publish_tf" value="true"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="true"/>
    <param name="vo_used" value="false"/>
    <param name="output_frame" value="odom"/>
  </node>

  <!-- RPLIDAR a2 -->
  <node if="$(arg launch_rplidar)" name="rplidarNode" pkg="rplidar_ros" type="rplidarNode" output="screen">
    <param name="serial_port" type="string" value="/dev/rplidar"/>  
    <param name="serial_baudrate" type="int" value="115200"/>
    <param name="frame_id" type="string" value="laser"/>
    <param name="inverted" type="bool" value="false"/>
    <param name="angle_compensate" type="bool"   value="true"/>
  </node>

</launch>
